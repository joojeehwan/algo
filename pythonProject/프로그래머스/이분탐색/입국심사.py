def solution(n, times):
    answer = 0

    # right는 가장 비효율적으로 심사했을 떄 걸리는 시간
    # 가장 긴 심사시간이 소요되는 심사관에게 n명 모두 심사 받는 경우이다.
    left, right = 1, max(times) * n

    while left <= right:
        mid = (left + right) // 2
        people = 0
        for time in times:
            # people은 모든 심사관들이 mid 분 동안 심사한 사람의 수
            people += mid // time
            # 모든 심사관을 거치지 않아도 mid분 동안 n명 이상의 심사를 할 수 있다면 반복문을 나간다.
            # 심사 인원수를 넘으면 다음 단계
            if people >= n:
                break

        # n명을 심사 할 수 있는 경우
        # 한 심사관에게 주어진 시간을 줄여본다.
        # 심사한 사람의 수가 심사 받아야할 사람의 수(n)보다 많거나 같은 경우
        if people >= n:
            answer = mid
            right = mid - 1

        elif people < n:
            left = mid + 1
    return answer


''''

이분 탐색(이진 탐색)으로 알고리즘을 푸는 것이 처음이라서 블로그들의 설명을 요리조리 보면서 이해했다 ㅠㅠ 그래서 주석도 많다

이분 탐색을 할 때는 ‘이분 탐색의 범위는 무엇으로 할지’ 와 ‘이분 탐색의 기준을 무엇으로 할지’ 을 잡아야한다.

범위 : 심사를 하는데 총 걸리는 시간으로, 1분 부터 가장 비효율적으로 심사를 받았을 때 걸리는 시간(분)으로 하였다.
mid : 모든 심사관들에게 주어진 시간이다. 따라서 people 은 모든 심사관들이 mid분 동안 심사한 사람의 수가 된다.
기준 : mid 동안 심사한 사람의 수(people)가
심사 받아야할 사람의 수(n)보다 많거나 같을 경우에는 시간이 충분했던 것이므로 주어진 시간을 줄이고 ( right = mid - 1 -> right 를 줄이면 left와 right의 중간 값인 mid 도 줄어드니까 주어진 시간이 줄어든다.)
심사 받아야할 사람의 수(n)보다 적은 경우에는 시간이 부족했던 것이므로 주어진 시간을 늘린다. (left = mid + 1)
이분 탐색은 범위와 기준을 잡는 것이 핵심인 것 같다!



문제를 처음 보았을 때는 for 문을 돌면서 일일히 확인하는 문제인가 싶었지만 수의 범위가 너무 크기에 불가능해서 해당 방법으로는 풀 수 없다고 판단하여 이분 탐색의 개념에 대해 더 알아보고 문제에 접근했습니다.

문제의 핵심은 최소, 최대 범위를 구한 뒤 구하려고 하는 답을 이분 탐색으로 범위를 좁혀가며 답을 구하는 것 입니다.

문제에서 최대 범위는 심사관 중 가장 오래걸리는 심사관을 계속 검사 받는 경우입니다.
최소, 최대 범위의 중간값인 mid가 n명을 심사 할 수 있는 지 아닌 지를 파악하며 이분 탐색을 진행합니다.

n명을 심사 할 수 있다면, 답을 갱신하고, 최대 범위를 줄여봅니다.
n명을 심사 할 수 없다면, 최소범위를 늘려봅니다.
'''